// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("samples") // if you want to use snake_case format
}

model Account {
  id             String    @id
  role           Role      
  email          String    @unique
  password       String
  isVerified     Boolean   @default(false)
  name           String
  avatar         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  User           SubsData?
  Company        Company?
}

enum Role {
  admin
  developer
  user
}

model UserProfile {
  id             String      @id 
  subsDataid     String   @unique
  SubsData       SubsData @relation(fields: [subsDataid], references: [id], onDelete: Cascade)
  gender         Gender
  pob            String
  dob            DateTime
  address        String
  phoneNumber    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

}

enum Gender {
  male
  female
}

model UserEdu {
  id             String @id
  subsDataId     String
  subsData       SubsData @relation(fields: [subsDataId], references: [id], onDelete: Cascade)
  level          EduLevel
  school         String
  discipline     String
  startDate      DateTime
  endDate        DateTime?
  description    String?    @db.VarChar(300)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum EduLevel {
  doctorate
  master
  bachelor
  highschool
}

model SubsCtg {
  id              String   @id
  name            String
  price           Int      @default(0)
  cvGenerator     Boolean  @default(false)
  skillAssessment Boolean  @default(false)
  priority        Boolean  @default(false)
  createdAt       DateTime @default(now())
  user            SubsData[]
  payment         Payment[]
}

model SubsData {
  id                String          @id
  accounts          Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId         String
  subsCtg           SubsCtg         @relation(fields: [subsCtgId], references: [id])
  subsCtgId         String
  startDate         DateTime?
  endDate           DateTime?
  isSubActive       Boolean         @default(false)
  cvPath            String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  payment           Payment[]
  userSkill         UserSkill[]
  userProfile      UserProfile?
  userEdu           UserEdu[]
  worker            Worker[]

  @@unique([accountId])
}

model Company {
  id          String   @id
  account    Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId   String
  phone       String
  address     String?   
  website     String?
  description String?   @db.VarChar(300)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  worker      Worker[]
  compreview  CompReview[]

  @@unique([accountId])
}


model Payment {
  id           String   @id
  subsDataId   String
  subsData     SubsData @relation(fields: [subsDataId], references: [id], onDelete: Cascade)
  subsCtgId    String
  subsCtg      SubsCtg @relation(fields: [subsCtgId], references: [id])
  method       paymentMethod?
  proof        String?
  isApproved   Boolean? 
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  approvalById  String?
}

enum paymentMethod {
  transfer
  midtrans
}

model Skill {
  id            String @id
  name          String @unique
  createdById   String   
  createdAt     DateTime @default(now())
  question      SkillQuestion[]
  skillScore    SkillScore[]
  userSkill     UserSkill[]
}

model SkillQuestion {
  id            String @id
  skillId       String 
  skill         Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)
  question      String
  imageUrl      String?
  option_a      String
  option_b      String
  option_c      String
  option_d      String
  answer        String
}

model SkillScore {
  id              String      @id
  userSkillId     String
  userSkill       UserSkill   @relation(fields: [userSkillId], references: [id], onDelete: Cascade)
  skillId         String
  skill           Skill       @relation(fields: [skillId], references: [id])
  score           Int
}

model UserSkill {
  id            String        @id
  subsDataId    String
  subsData      SubsData      @relation(fields: [subsDataId], references: [id], onDelete: Cascade)
  skillId       String
  skill         Skill         @relation(fields: [skillId], references: [id])
  skillScore    SkillScore[]
}

model Worker {
  id            String      @id
  subsDataId    String
  subsData      SubsData    @relation(fields: [subsDataId], references: [id], onDelete: Cascade)
  companyId     String?
  company       Company?     @relation(fields: [companyId], references: [id])
  companyName   String
  position      String
  startDate     DateTime
  endDate       DateTime?
  description   String?     @db.VarChar(300)
  isVerified    Boolean     @default(false)
  compReview    CompReview[]
}

model CompReview {
  id            String    @id
  companyId     String
  company       Company   @relation(fields: [companyId], references: [id])
  workerId      String
  worker        Worker    @relation(fields: [workerId], references: [id], onDelete: Cascade)
  salary        Int?
  culture       Int?
  wlb           Int?
  facility      Int?
  career        Int?
  description   String?   @db.VarChar(300)
}