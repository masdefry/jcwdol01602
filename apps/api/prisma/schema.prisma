// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("samples") // if you want to use snake_case format
}

model Account {
  id             String    @id
  role          Role      @relation(fields: [roleId], references: [id])
  roleId         Int
  email          String    @unique
  password       String
  isVerified     Boolean   @default(false)
  name           String
  avatar         String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  User           SubsData[]
  Company        Company[]
  Admin         Admin[]
  Profile       Profile[]
}

model Profile {
  id        Int      @id @default(autoincrement())
  accountId    String
  account    Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
   gender         Gender?
  birthDate      DateTime?
  education      String?
  address        String?
  phoneNumber    String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Role {
  id       Int    @id @default(autoincrement())
  name     String    @unique
  accounts Account[]
}

enum Gender {
  MALE
  FEMALE
}

model SubsCtg {
  id              String   @id
  name            String
  price           Int      @default(0)
  cvGenerator     Boolean  @default(false)
  skillAssessment Boolean  @default(false)
  priority        Boolean  @default(false)
  createdAt       DateTime @default(now())
  User            SubsData[]
}

model SubsData {
  id                String          @id
  accounts          Account         @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId         String
  subscription      SubsCtg         @relation(fields: [subsCtgId], references: [id])
  subsCtgId         String
  startDate         DateTime?
  endDate           DateTime?
  isSubActive       Boolean         @default(false)
  cvPath            String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  payment           Payment[]

  Applicant Applicant[]
}

model Company {
  id          String   @id @default(uuid())
  accounts    Account  @relation(fields: [accountId], references: [id])
  accountId   String
  name        String   @unique
  email       String   @unique
  phone       String
  address     String
  website     String?
  description String?
  logo        String?
  socialMedia String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobs        Job[]

  Admin Admin[]
}

model Admin {
  id                String          @id @default(uuid())
  accounts          Account         @relation(fields: [accountId], references: [id])
  accountId         String
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Job {
  id          String   @id @default(uuid())
  companyId   String
  company     Company  @relation(fields: [companyId], references: [id])
  title       String
  description String
  category    String
  location    String
  salaryRange String?
  tags        String
  deadline    DateTime?
  isPublished Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  applicants  Applicant[]
}

model Applicant {
  id        String   @id @default(uuid())
  userId    String
  user      SubsData     @relation(fields: [userId], references: [id])
  jobId     String
  job       Job      @relation(fields: [jobId], references: [id])
  appliedAt DateTime @default(now())
  expectedSalary Int?
  education   String?
  cvFile      String?
  status        ApplicantStatus @default(PENDING)
  @@unique([userId, jobId])
}


enum ApplicantStatus {
  PENDING
  INTERVIEW
  ACCEPTED
  REJECTED
}



model Payment {
  id           String   @id
  subsDataId   String
  subsData     SubsData @relation(fields: [subsDataId], references: [id])
  method       paymentMethod?
  proof        String?
  isApproved   Boolean @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

enum paymentMethod {
  transfer
  midtrans
}
